#include "SNData.h"
#include "Agency.h"
using namespace std;

int main()
{
    bool allOk=true;
    
    SNData::newSocialNetwork("TokTik",0.8,0.1);
    SNData::newSocialNetwork("Infagram",0.6,0.05);
    SNData::newSocialNetwork("YZ",0.5,0.2);
    SNData::newSocialNetwork("JungleBook",0.1,0.1);


    // --------------------------------- SNData --------------------------------------
    // Red social duplicada
    try {
        SNData::newSocialNetwork("JungleBook",0.1,0.1); // Error duplicado
        allOk = false;
    } catch(const std::exception& e) {
        cout << "ERROR: Red social duplicada" << endl;
    }
    
    // Valores ilegales en avgR y avgM
    try{ // Debería saltar invalid_argument
        SNData::newSocialNetwork("aaa",100,0.1);
        cout << "Ha ignorado que el valor de avgR > 1" << endl; // Error avgR
        allOk = false;
    }catch(const std::exception& e){
        cout << "ERROR: Valor ilegal en avgR (Tiene que ser así)" << endl;  // Error avgR
    }
    try{
        SNData::newSocialNetwork("bbb", -30,0.1);
        cout << "Ha ignorado que el valor de avgR < 0" << endl;  // Error avgR
        allOk = false;
    }catch(const std::exception& e){
        cout << "ERROR: Valor ilegal en avgR (Tiene que ser así)" << endl;  // Error avgR
    }

    try{ // Debería saltar invalid_argument
        SNData::newSocialNetwork("ccc",0.1,100);
        cout << "Ha ignorado que el valor de avgM > 1" << endl; // Error avgR
        allOk = false;
    }catch(const std::exception& e){
        cout << "ERROR: Valor ilegal en avgM (Tiene que ser así)" << endl;  // Error avgR
    }
    try{
        SNData::newSocialNetwork("ddd", 0.1,-30);
        cout << "Ha ignorado que el valor de avgM < 0" << endl;  // Error avgR
        allOk = false;
    }catch(const std::exception& e){
        cout << "ERROR: Valor ilegal en avgM (Tiene que ser así)" << endl;  // Error avgR
    }
    // -------------------------------------------------------------------------------------
    
    

    
    Agency pufosAmos("Los pufos amos",1000.0);
    
    pufosAmos.addInfluencer("Pijus Magnificus",0.25);
    pufosAmos.addInfluencer("Brian",0.15);

    pufosAmos.addInfluencer("Brian",0.55);   // ERR_DUPLICATED
    pufosAmos.addInfluencer("Loretta",1.05); // ERR_WRONG_COMMISSION 
    pufosAmos.addInfluencer("Loretta",0); // ERR_WRONG_COMMISSION 
    pufosAmos.addInfluencer("Loretta",-1); // ERR_WRONG_COMMISSION 

    pufosAmos.addInfluencer("Loretta",.75);

    cout << pufosAmos ;   

    pufosAmos.addFollowers("Pijus Magnificus", "YZ", 500);
    pufosAmos.addFollowers("Bdian","MSNotExist",400);    // ERR_NOT_FOUND
    pufosAmos.addFollowers("Brian","MSNotExist",400);    // ERR_UNKNOWN_SN
    pufosAmos.addFollowers("Loretta","TokTik",1200);
    pufosAmos.addFollowers("Loretta","Infagram",1300);
    pufosAmos.addFollowers("Loretta","YZ",700);
    pufosAmos.addFollowers("Loretta","TokTik",300);
    pufosAmos.addFollowers("Brian","JungleBook",65);
    pufosAmos.addFollowers("Brian","JungleBook",65);
    pufosAmos.addFollowers("Brian","JungleBook",-50);   // nFollowers < 0
    pufosAmos.addFollowers("Brian","JungleBook",0);   // nFollowers = 0

    cout << pufosAmos ;   
    

    // Event data
    cout << "---------- First event -----------" << endl;
    string snNames[] = { "TokTik", "JungleBook", "Infagram", "MSN", "YZ" };
    double evRat[]   = {  0.95,   0.05, 0.7, 0.003, 0.85 };
    vector<string> inm;
    inm.push_back("Loretta");
    inm.push_back("Pijus Ticus");  // ignore
    inm.push_back("Brian");
    inm.push_back("Pijus Magnificus");

    pufosAmos.newEvent(inm,5,snNames,evRat);
    cout << pufosAmos ;   


    double moneyEvent = pufosAmos.collectCommissions();
    cout << "Money generated by the event: " << moneyEvent << endl << pufosAmos ;

    // Event data
    cout << "---------- Second event -----------" << endl;
    string snNames2[] = { "TokTik", "JungleBook", "Infagram", "MSN", "YZ" };
    double evRat2[]   = {  0.95,   0.05, 0.7, 0.003, 0.85 };
    vector<string> inm2;
    inm2.push_back("Loretta");
    inm2.push_back("Pijus Ticus");  // ignore
    inm2.push_back("Brian");
    inm2.push_back("Pijus Magnificus");

    pufosAmos.newEvent(inm,0,snNames2,evRat2);    // nsns = 0
    cout << pufosAmos ;   


    double moneyEvent2 = pufosAmos.collectCommissions();
    cout << "Money generated by the event: " << moneyEvent2 << endl << pufosAmos ;

    // Event data
    cout << "---------- Third event -----------" << endl;
    string snNames3[] = { "TokTik", "JungleBook", "Infagram", "MSN", "YZ" };
    double evRat3[]   = {  0.95,   0.05, 0.7, 0.003, 0.85 };
    vector<string> inm3;
    inm3.push_back("Loretta");
    inm3.push_back("Pijus Ticus");  // ignore
    inm3.push_back("Brian");
    inm3.push_back("Pijus Magnificus");

    pufosAmos.newEvent(inm,-1,snNames3,evRat3);    // nsns < 0
    cout << pufosAmos ;   


    double moneyEvent3 = pufosAmos.collectCommissions();
    cout << "Money generated by the event: " << moneyEvent3 << endl << pufosAmos ;

    // Event data
    cout << "---------- Fourth event -----------" << endl;
    string snNames4[] = { "TokTik", "JungleBook", "Infagram", "MSN", "YZ" };
    double evRat4[]   = {  0.95, 0, 0.7, 0, 0.85 };
    vector<string> inm4;
    inm4.push_back("Loretta");
    inm4.push_back("Pijus Ticus");  // ignore
    inm4.push_back("Brian");
    inm4.push_back("Pijus Magnificus");

    pufosAmos.newEvent(inm,5,snNames4,evRat4);
    cout << pufosAmos ;   


    double moneyEvent4 = pufosAmos.collectCommissions();
    cout << "Money generated by the event: " << moneyEvent4 << endl << pufosAmos ;

    // Event data
    cout << "---------- Fifth event -----------" << endl;
    string snNames5[] = { "TokTik", "JungleBook", "Infagram", "MSN", "YZ" };
    double evRat5[]   = {  0.95, 0, -0.7, 0.003, -0.85 };
    vector<string> inm5;
    inm5.push_back("Loretta");
    inm5.push_back("Pijus Ticus");  // ignore
    inm5.push_back("Brian");
    inm5.push_back("Pijus Magnificus");

    try{
        pufosAmos.newEvent(inm5,5,snNames5,evRat5);
        allOk = false;
    }catch(const std::exception& e){
        cout << "SE HA PRODUCIDO UNA EXCEPCIÓN, LO QUE SIGNIFICA QUE SÍ FUNCIONA BIEN, ¡ENHORABUENA!" << endl;
    }
    
    cout << pufosAmos;


    double moneyEvent5 = pufosAmos.collectCommissions();
    cout << "Money generated by the event: " << moneyEvent5 << endl << pufosAmos ;

    if (allOk){
        cout << endl << "EL PROGRAMA HA FINALIZADO CON ÉXITO" << endl;
    }else{
        cout << endl << "EL PROGRAMA NO HA FINALIZADO CON ÉXITO :(" << endl;
    }
    
    return 0;
}


